# Internal Patch Roadmap

- When updating this document, do not remove previous entries. Amend the file by adding new entries at the top.

## Version 1.0.0 - Planned Release

### Overview
Version 1.0.0 will introduce user login functionality and establish the application as a DAK board replacement with fully customizable widgets.

### Key Features & Priorities
- **User Login Functionality** - **Priority: High**
  - Implement a secure user login system.
  - Allow users to customize widgets and save preferences.
  - **Estimated Timeline**: 4-6 weeks.
  - **Risks**: Security vulnerabilities and data privacy concerns.

### Development Considerations
- Comprehensive testing for security and performance.
- Ensure compatibility with existing features and widgets.

---

## Version 0.3.0 - Planned Release

### Overview
Version 0.3.0 will implement changes and improvements based on user feedback.

### Key Areas of Improvement
- Focus on UI/UX improvements and optimization.
- Refactor or enhance features that receive user feedback during testing.

### Development Considerations
- Plan feedback-gathering mechanisms (surveys, analytics, etc.).
- Allocate time for bug fixes or refactoring based on user-reported issues.

---

## Version 0.2.0 - Planned Release

### Overview
Version 0.2.0 focuses on introducing major new features that significantly expand the functionality of the application.

### Key Features & Priorities
1. **RSS Feed Integration** - **Priority: High**
   - Allow users to pull in external content via an RSS feed reader.
   - **Estimated Timeline**: 3-4 days.
   - **Risks**: Parsing RSS data may introduce performance issues depending on the source.

2. **Ukrainian & English Word of the Day** - **Priority: High**
   - Use the external API to display a word of the day in Ukrainian and English with cross translation.
   - **Estimated Timeline**: 2 days.
   - **Risks**: API integration could introduce latency or dependency issues.

3. **iOS Public Album Slideshow** - **Priority: Medium**
   - Add functionality to display images from an iOS public album in a slideshow format.
   - **Estimated Timeline**: 3 days.
   - **Risks**: Handling image loading efficiently to avoid performance bottlenecks.

4. **Google Maps Upcoming Events List** - **Priority: Medium**
   - Display a list of upcoming events based on the user's location using Google Maps integration.
   - **Estimated Timeline**: 4-5 days.
   - **Risks**: API limits and ensuring proper handling of geolocation permissions.

5. **Shopping List with Scheduling** - **Priority: High**
   - Create a grid-based shopping list similar to the chores system, with user-settable schedules based on average consumption.
   - **Estimated Timeline**: 4-5 days.
   - **Risks**: Complexity in ensuring the scheduling logic works as expected and doesn't interfere with existing functionalities.

### Development Considerations
- These features require comprehensive testing, especially API-driven ones, to ensure reliability.
- Plan for performance optimization for features that involve external data fetching (RSS, APIs).

---

## Version 0.1.9 - Planned Release

### Overview
Version 0.1.9 aims to address remaining known issues and further improve the user experience with new features and enhancements.

### Key Updates & Priorities
1. **Folder Restructure** - **Priority: High**
   - Implement a clean folder hierarchy to separate concerns between assets, logic, and configurations.
   - Goal: Reduce technical debt, making the project easier to manage and scale.
   - **Estimated Timeline**: 3-4 days.
   - **Risks**: Ensure that nothing breaks in existing workflows due to path changes.

2. **Fix Chore State Initialization** - **Priority: High**
   - Address the issue where chores may not initialize in the correct state on first load or reset.
   - **Estimated Timeline**: 2 days.
   - **Risks**: This involves logic changes, so regression tests are important to ensure this doesn't introduce new bugs.

3. **Performance Optimization** - **Priority: Medium**
   - Optimize JavaScript and CSS for better performance.
   - Implement lazy loading for non-critical resources.
   - **Estimated Timeline**: 2-3 days.
   - **Risks**: Ensure optimizations don't break existing functionality.

### Development Considerations
- Comprehensive testing across different devices and screen sizes is crucial.
- Ensure that the new features (especially the day/night themes) don't negatively impact performance.
- Test the swipe functionality thoroughly to ensure it doesn't interfere with other touch-based interactions.

---

## Version 0.1.8 - Completed Release

### Overview
Version 0.1.8 focused on implementing full-screen functionality for widgets, improving weather information display, and enhancing the overall user experience.

### Key Updates & Priorities

1. **Swipe Function for Full Screen** - **Completed**
   - Implemented swipe up gesture to make widgets fullscreen.
   - Implemented swipe down gesture to return widgets to normal size.
   - Maintained existing toggle button functionality.

2. **Weather Widget Background in Full Screen** - **Completed**
   - Added a background to the weather widget when it goes full screen.

3. **Remove Scroll Bars in Resize Mode** - **Completed**
   - Eliminated scroll bars when widgets are in resize mode.

### Remaining Issues
- Chores may not always initialize in the correct state (flashing red-white) on first load or reset.

---

## Version 0.1.7 - Completed Release

### Overview
Version 0.1.7 focused on improving widget functionality, addressing scrollbar issues, and enhancing the overall user experience. The folder restructure was completed in this version.

### Remaining Issues
- Chores may not always initialize in the correct state (flashing red-white) on first load or reset.

---

## Version 0.1.6 - Completed Release

### Overview
Version 0.1.6 focused on implementing new features and addressing known issues.

### Key Updates & Priorities

1. **All Days Button in Chore Scheduling Popup** - **Completed**
   - Added a new button to the chore scheduling popup for selecting all days at once.
   - Implemented the functionality in chores.js to handle the "All Days" button click.
   - Updated the UI to include the new button in the popup.

2. **Second Time Slot for Chore Scheduling** - **Completed**
   - Modified the chore configuration structure to include a second optional time slot.
   - Updated the chore scheduling popup to display and handle the second time slot.
   - Adjusted the chore checking logic to account for the second time slot.

3. **Auto-close Functionality for Popups** - **Completed**
   - Implemented a new function in ui.js to handle closing popups when clicking outside.
   - Added event listeners to detect clicks outside the popup area.
   - Ensured that clicks on the config icon don't trigger the auto-close functionality.

### Changed Features
1. **Centered Chore Icons**
   - Updated the CSS in components/chores.css to center the icons within their containers.
   - Adjusted the layout of chore buttons to ensure consistent alignment across different screen sizes.

2. **Non-scrollable Page Layout**
   - Modified the main.css file to make the page fit all content on a single screen without scrolling.
   - Adjusted the layout of widgets and other elements to fit within the viewport.
   - Implemented fixed positioning for the debug toggle and lock icon.

### Removed Features
1. **Reset All Chores and Export Chore Data Buttons**
   - Removed the HTML elements for these buttons from the index.html file.
   - Deleted associated JavaScript functions from chores.js.
   - Removed related CSS styles from components/chores.css.

### Fixed Issues
1. **Timer Behavior in Content Cycling**
   - Refactored the contentCycling.js file to address issues with timer behavior.
   - Implemented separate timers for manual and auto-cycling to prevent interference.
   - Ensured that the 120-second delay after manual cycling works correctly before resuming auto-cycling.

### Known Issues
1. **Main Widget Size Change on Cycling**
   - On initial load or reset, the main widget changes size on each cycle.
   - This affects the layout stability and user experience.
   - Further investigation is needed to determine the root cause.

2. **Right Widget Debug Outlines Visible Outside Debug Mode**
   - Blue and green lines for the right widget are still visible when debug mode is not active.
   - This is likely a CSS issue that needs to be addressed.

3. **Incorrect Initial Chore States**
   - On initial load or without a scheduled trigger, chores are only displayed in white.
   - They should be in their appropriate white or red flashing state based on their due status.
   - The chore checking logic may need to be adjusted to properly set initial states.

### Future Improvements
- Consider adding more customization options for chore scheduling.
- Explore ways to optimize the auto-close functionality for better performance.
- Investigate potential improvements for the non-scrollable layout on various device sizes.
- Address the known issues listed above in the next patch or update.

### Lessons Learned
1. Importance of thorough testing when implementing new UI features.
2. Benefits of modular code structure when adding new functionality.
3. Significance of considering user experience when removing features.
4. Need for comprehensive testing across different states (initial load, reset, etc.).

### Development Environment
- No changes to the development environment in this version.

### Third-party Dependencies
- No new dependencies were added in this version.
- Existing dependencies remain compatible with the current implementation.

## Version 0.1.5 - 2023-05-14

[Previous content remains unchanged]
